= Plain Text Publishing
David Priest <ptp-tools@davidpriest.ca>
1.0.0, 2013-06-25
:subtitle: ptp-tools Master Quine
:cover-tagline: Platform agnostic, bare metal XML multipublishing.
:cover-image: media/beaver.png
:logo: media/beaver.png
:biblioid: dcp.ptp.mq
:releaseinfo: Early Beta
:keywordset: ptp-tools, publishing, plain text


[preface]
== Preface

ptp-tools combines a plain text markup translator with a industry-standard
open source publishing toolset that generates professional-quality PDF, ePub,
and XHTML final documents. Pre-publication transformation and publication
layout and style are fully customizable, supporting both a corporate standard
style and customizations of that style for each document.

ptp-tools comprises:

* ASCIIDoc, a plain text markup processing system.

* Docbook XML and the Stayton XSL:FO transformations.

* Apache FOP, an XSL:FO to PDF rendering engine.

* ptp-tools/ptp, a set of Bash and Windows scripts guiding the
  transformation pipeline.

* xsltproc, an XSLT interpreter (needed by Windows platforms).

* XMLSh, a POSIX-flavoured "Bash plus XML" scripting interpreter.

ptp-tools requires pre-installation of:

* Python.

* Java.

== ptp-tools kickstarter

When ptp-tools is installed, this simple script rebuilds the toolset. It
tangles this file, removes the old software, copies the tangled files back to
the root directory, and then redownloads and installs the supporting
open source software.

[tangle,kickstart.sh]
----
#bash/sh
#davidpriest.ca
#Generate the Unix ptp-tools installer
#

shopt -s extglob
if [ -e ./ptp/quine ] ; then
  # Build ptp-tools
  cd ptp
  ./tangle.sh ./quine/_ptp-tools.txt
  # Remove old open source tools
  cd ..
  if [ -e ./ptp/quine ] ; then
    rm -r -- !(ptp*)
  fi
  # Install ptp-tools root-level components
  cd ptp/output
  chmod u+x *.sh
  cp -f CATALOG.XML init-fop.xsl init.sh kickstart.sh install.sh README.MD ../..
  # Install open source tools
  cd ../..
  ./install.sh
else
  echo "This does not appear to be the ptp-tools directory!"
  echo "Destructive operation cancelled."
fi
----




=== Tangling Literate ASCIIDoc

Literate source code in ASCIIDoc is implemented using an AttributeList
element, http://www.methods.co.nz/asciidoc/userguide.html#X79. 

The first attribute is `tangle`; the second attribute is either the program
filename or the name of a program fragment. 

The delimiters identifying a program fragment are defined in the XSL
transformation; the ASCIIDoc portion of the tool pipeline is agnostic. See
<<tldb>>.

When literate source is tangled to Docbook, the tangle block becomes a `programlisting` element with two attributes: 

* @role="litsrc": A convenient xpath identifier.
* @remap="__[program filename|fragment name]__": The program filename or a delimited fragment name.

[tangle,asciidoc-tangle.conf]
----
# Literate Programming in ASCIIDoc
# davidpriest.ca

[tangle-block]
template::[listingblock]

[paradef-default]
template::[tangle-filter-style]

[paradef-literal]
template::[tangle-filter-style]

[blockdef-open]
template::[tangle-filter-style]

[blockdef-listing]
template::[tangle-filter-style]

[tangle-filter-style]
tangle-style=template="tangle-block",presubs=(),postsubs=("specialcharacters","callouts"),posattrs=("refname","snipname","lang")

ifdef::basebackend-docbook[]
[tangle-block]
<formalpara{id? id="{id}"} role="litsrc"{reftext? xreflabel="{reftext}"}><title>{title}</title><para>
{title#}<programlisting role="litsrc" remap="{snipname}"{args? {args}}>
{title%}<programlisting role="litsrc" remap="{snipname}"{lang? lang="{lang}"}{args? {args}}>
|
</programlisting>
{title#}</para></formalpara>
endif::basebackend-docbook[]

ifdef::basebackend-html[]
[tangle-block]
<a name="{id}"></a>
<p><b>{title}</b></p>
<table{role? class="{role}"} border="0" bgcolor="#e8e8e8" width="100%" cellpadding="10"><tr><td>
<pre><code>
|
</code></pre>
</td></tr></table>
endif::basebackend-html[]

ifdef::basebackend-xhtml11,basebackend-html5[]
[tangle-block]
<div class="listingblock{role? {role}}">
<a id="{id}"></a>
<div class="title">{caption=}{title}</div>
<div class="content">
<pre><code>
|
</code></pre>
</div></div>
endif::basebackend-xhtml11,basebackend-html5[]
----

[[tldb]]
=== Tangling Literate Docbook

Literate fragments are identified using French quotation marks: «fragment
name». Within the tangle block, French quotation marks are again used to
identify a fragment.

[tangle,tangle.xsl]
----
<?xml version="1.0"?>
<!-- davidpriest.ca -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0">
  <!--
  programlistings contain source code
    remap attribute contains:
      master file name
      «chunk name»
  within the programlisting content
    «chunk name»
  -->
  <xsl:variable name="DOC" select="."/>
  <xsl:template match="/">
    <xsl:for-each select="//programlisting[@role='litsrc' and not(contains(@remap,'&#xAB;'))]">
      <xsl:variable name="PROGRAM">
        <xsl:apply-templates select="." mode="literate"/>
      </xsl:variable>
      <xsl:result-document href="{@remap}" method="text">
        <xsl:value-of select="$PROGRAM"/>
      </xsl:result-document>
    </xsl:for-each>
  </xsl:template>
  <xsl:template match="programlisting" mode="literate">
    <xsl:analyze-string select="./text()" regex="(&#xAB;.*?&#xBB;)">
      <xsl:matching-substring>
        <xsl:apply-templates select="$DOC//programlisting[@role='litsrc' and @remap=regex-group(1)]" mode="literate"/>
      </xsl:matching-substring>
      <xsl:non-matching-substring>
        <xsl:value-of select="."/>
      </xsl:non-matching-substring>
    </xsl:analyze-string>
  </xsl:template>
</xsl:stylesheet>
----


Hmmm.

[tangle,CATALOG.XML]
----
<?xml version="1.0"?>
<!-- davidpriest.ca -->
<catalog xmlns="urn:oasis:names:tc:entity:xmlns:xml:catalog">
  <public publicId="-//OASIS//DTD DocBook XML V4.5//EN" uri="./docbook-xml-4.5/docbookx.dtd"/>
  <rewriteURI uriStartString="http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" rewritePrefix="./docbook-xml-4.5/docbookx.dtd"/>
  <rewriteURI uriStartString="http://davidpriest.ca/ptp/xsl" rewritePrefix="./ptp/xsl"/>
  <nextCatalog catalog="./docbook-xml-4.5/catalog.xml"/>
  <nextCatalog catalog="./docbook-xml-5.0/catalog.xml"/>
  <nextCatalog catalog="./docbook-xsl/catalog.xml"/>
</catalog>
----

[tangle,init.sh]
----
#!/bin/bash
#davidpriest.ca
export PTP_TOOLS="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export XMLSH=$PTP_TOOLS/xmlsh
export PATH=$PTP_TOOLS/asciidoc:$PTP_TOOLS/fop:$PTP_TOOLS/xmlsh/unix:$PATH
export XML_CATALOG_FILES=$PTP_TOOLS/CATALOG.XML
export FOP_OPTS=-Djava.awt.headless=true 

xsltproc --stringparam PTP_TOOLS $PTP_TOOLS $PTP_TOOLS/init-fop.xsl $PTP_TOOLS/ptp/fop.conf.template > $PTP_TOOLS/ptp/fop.bash.conf
----

[tangle,init-fop.xsl]
----
<?xml version="1.0"?>
<!-- davidpriest.ca -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
  <xsl:param name="PTP_TOOLS"/>
  <xsl:template match="base">
    <xsl:copy>
      <xsl:copy-of select="@*"/>
      <xsl:value-of select="$PTP_TOOLS"/><xsl:text>/ptp/</xsl:text>
    </xsl:copy>
  </xsl:template>
  <xsl:template match="font-base">
    <xsl:copy>
      <xsl:copy-of select="@*"/>
      <xsl:value-of select="$PTP_TOOLS"/><xsl:text>/ptp/fonts/</xsl:text>
    </xsl:copy>
  </xsl:template>
  <xsl:template match="@*|node()">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()"/>
    </xsl:copy>
  </xsl:template>
</xsl:stylesheet>
----

[tangle,README.md]
----
Publishing Toolset
==================

This repository contains a multi-platform publishing toolset, supporting OS X,
Linux, and Windows platforms.

The toolset accepts ASCIIDoc text files and transforms them to PDF, HTML, ePub
and other formats, applying corporate style and layout to the contents. It may
also be used, with little more effort, to transform XML to Docbook XML, which
can in turn be transformed to PDF, HTML, ePub and so on.

Configuration
=============

When publishing documents that have been configured to use this toolset,
`publish.sh` (OS X, Linux) and/or `publish.bat` (Windows) will first make a
call to `ptp-tools/init.sh` or `ptp-tools/init.bat`. To ensure that the
initialization file can be found, clone the repository as a sibling to the
publication directory or as a subdirectory in the publication directory. See
*Customization*, below, for alternatives.

The `_TEMPLATE` directory provides a template for new documents. It may be
copied to a directory of your choice. As described in the previous paragraph,
modify the publishing commands to point to the toolset directory. This can be
a relative or absolute path. If you rename the root document, you must also
modify the `DOCUMENT` name on line three.

Customization
=============

The toolset is preconfigured to provide standard corporate visual style to
documents. Changes that are unique to an individual document should be
performed in that document package, not to the toolset.

Documents configured to use this toolset have a `ptp-config` directory. Several
files provide “hooks” that will be called by the toolset. `asciidoc.conf` is
used in converting ASCIIDoc to Docbook XML; refer to the ASCIIDoc literature
for usage details. The `xsl/` directory provides DocBook-to-X customization;
refer to Bob Stayton's “DocBook XSL: The Complete Guide” for details.

The toolset has `ptp` directory, containing configuration and
support files that supplement or override settings and transformations
provided by the stock ASCIIDoc, Docbook XSL, and FOP tools:

`a2x.bash.conf`, `a2x.win.conf`: Configuration files for the ASCIIDoc `a2x`
tool.

`asciidoc.conf`: An ASCIIDoc configuration file. Imported *before*
`[doc]/ptp-config/asciidoc.conf`.

`asciidoc-replacements.conf`: An ASCIIDoc configuration file. Contains
replacements for product names &c, ensuring they use consistent spelling.
Imported *after* `ptp/asciidoc.conf` and
`[doc]/ptp-config/asciidoc.conf`.

`fonts/`: Contains font files used in PDF production. The FOP configuration
file (`fop.conf`) can also refer to fonts found on your system or in other
directories.

`fop.conf`: Configuration file for FOP, the PDF engine. The base and base-font
elements are modified by the `init.sh` or `init.bat` command when a document
is published.

`icons/`: Replacement icons for callouts and annotations used in the Docbook
transformation.

`images/`: Contains corporate logos and banners.

`publish.sh`, `publish.bat`: The scripts that drive the default publishing
process. These are typically called by the publication scripts packaged with
documents that use this publishing toolchain.

`xsl/`: Contains custom Docbook XSL parameters and templates, providing
consistent corporate visual style and structure to documents. These add to and
override the default `docbook-xsl` transformations found in `docbook-xsl`,
located in the toolset directory.

Directly Using the Tools
========================

The toolset is normally used by a document package to provide publishing
support for the document contents. See Configuration, above, to use the
toolset with a document package.

The tools can also be called independently. When doing so, several environment
variables must be configured before calling the tool by sourcing the `init.sh`
(Bash) or calling the `init.bat` (Windows) file.

Here is an example where an existing Docbook XML file is transformed to PDF and HTML:

    #!/bin/bash
    # Configure essential environment variables
    if [ -n "$PTP_TOOLS" ] ; then
      source $PTP_TOOLS/init.sh
    elif [ -e "../ptp-tools/init.sh" ] ; then
      source ../ptp-tools/init.sh
    elif [ -e "./ptp-tools/init.sh" ] ; then
      source ./ptp-tools/init.sh
    else
      echo "Unable to find publishing tools 'init.sh'" >&2
      exit 1
    fi
    
    filename=${1%.xml} # remove extension

    # transform from Docbook XML to pre-PDF XML:FO
    xsltproc --novalid --stringparam PTP_TOOLS "$PTP_TOOLS" --output \
    $filename.fo ptp-config/xsl/fo-article.xsl $filename.xml

    # transform from XML:FO to PDF
    fop -c $PTP_TOOLS/ptp/fop.bash.conf -fo $filename.fo -pdf \
    $filename.pdf

    # transform from XML:FO to XHTML
    xsltproc --stringparam navig.graphics 1 --novalid --stringparam PTP_TOOLS \
    "$PTP_TOOLS" --output $filename.html ptp-config/xsl/xhtml.xsl $filename.xml
----


== The Open Source Tools: Unix Edition

The Unix edition of ptp-tools requires the following software to be
pre-installed:

* Python
* Java
* Git
* Mercurial

The `install.sh` script will subsequently install the remaining required
components.

[tangle,install.sh]
----
#bash/sh
#davidpriest.ca
#Install ptp-tools and supporting software.

«install_asciidoc»

«install_docbook-xml»

«install_docbook-xsl»

«install_fop»

«install_xmlsh»

«install_xsltproc»

«install_saxon»

«install_diffmk»

«install_ptp-tools»

#Move some ptp resources to the root directory
cp -R ptp/kickstart/* .
----

=== ASCIIDoc

Installs ASCIIDoc, a plain-text to Docbook XML transformation tool. Its
transformation engine is roughly regex and template-based.

[tangle,«install_asciidoc»]
----
#Download and install the ASCIIDoc toolset.
echo "Installing ASCIIDoc"
hg clone -b default -r 8.6.8 https://code.google.com/p/asciidoc/ asciidoc
----

=== Docbook-XML

Installs DTDs for docbook 4.5 and docbook 5.

[tangle,«install_docbook-xml»]
----
#Download and install the Docbook 4.5 DTD
echo "Installing Docbook 4.5 DTD"
curl http://www.docbook.org/xml/4.5/docbook-xml-4.5.zip --output docbook-xml-4.5.zip
unzip -o -q docbook-xml-4.5.zip -d docbook-xml-4.5
rm docbook-xml-4.5.zip

#Download and install the Docbook 5 Schemas
echo "Downloading Docbook 5 Schemas"
curl -O http://www.docbook.org/xml/5.0/docbook-5.0.zip
unzip -o -q docbook-5.0.zip
mv docbook-5.0 docbook-xml-5.0
rm docbook-5.0.zip
----

=== Docbook-XSL

Installs the Docbook XSL stylesheets. These are used to transform Docbook XML
to PDF, HTML, ePub, and other formats.

[tangle,«install_docbook-xsl»]
----
#Download and install the standard Docbook XSL stylesheets
echo "Installing Docbook XSL transformations"
curl -L -O http://downloads.sourceforge.net/project/docbook/docbook-xsl/1.78.1/docbook-xsl-1.78.1.zip
unzip -o -q docbook-xsl-1.78.1.zip
mv docbook-xsl-1.78.1 docbook-xsl
rm docbook-xsl-1.78.1.zip
----

=== Apache FOP

Installs Apache FOP, which tranforms FO files to PDF.

[tangle,«install_fop»]
----
#Download and install Apache FOP
echo "Installing Apache FOP"
curl -L -O http://mirror.csclub.uwaterloo.ca/apache/xmlgraphics/fop/binaries/fop-1.1-bin.tar.gz
tar xf fop-1.1-bin.tar.gz
mv fop-1.1 fop
rm fop-1.1-bin.tar.gz
----

==== XMLSH

Installs XMLSH, a bash-like (POSIX) shell adding tools and piping support for
XML files.

[tangle,«install-xmlsh»]
----
#Download and install XMLSH
echo "Installing XMLSH"
curl -L -O http://downloads.sourceforge.net/project/xmlsh/xmlsh/1.2.3/xmlsh_1_2_3.zip
unzip -o -q xmlsh_1_2_3.zip
mv xmlsh_1_2_3 xmlsh
rm xmlsh_1_2_3
----

==== XSLTPROC

Not required for OS X or Linux installations.

[tangle,«install-xsltproc»]
----
#XSLTProc is not needed for OS X or Linux platforms.
----

==== Saxon

Saxon is required for XSLT 2.0 processing.

[tangle,«install-saxon»]
----
#Download and install Saxon HE
echo "Installing SaxonHE"
curl -L -O http://downloads.sourceforge.net/project/saxon/Saxon-HE/9.5/SaxonHE9-5-1-1J.zip
unzip -o -q SaxonHE9-5-1-1J.zip -d saxonhe
rm SaxonHE9-5-1J.zip
----

=== diffmk

Installs Norm's `diffmk` application.

[tangle,«install-diffmk»]
----
#Download and install diffmk
echo "Installing diffmk"
curl -L -O http://downloads.sourceforge.net/project/diffmk/diffmk/3.0.a1/diffmk-3.0.a1.zip
unzip -o -q diffmk-3.0.a1.zip
mv diffmk-3.0.a1 diffmk
rm diffmk-3.0.a1.zip
----

=== ptp-tools

Installs a set of scripts and support files supporting a platform-independent
multi-format publishing toolset and workflow. Input formats include ASCIIDoc
and Docbook XML; output formats include XHTML, EPub3, PDF, and woven literate
programs.

[tangle,«install_ptp-tools»]
----
#Download and install the ptp-tools scripts and support files.
#https://github.com/davidpriest/ptp-tools.git
#git clone --depth=1 --single-branch --branch master https://github.com/davidpriest/ptp-tools.git ptp
----

== The Open Source Tools: Windows Edition

The Windows edition requires the following software to be pre-installed:

* Python
* Java
* Git
* Mercurial

[tangle,install.bat]
----
REM Install ptp-tools and supporting software
REM davidpriest.ca

«winstall_asciidoc»

«winstall_docbook-xml»

«winstall_docbook-xsl»

«winstall_fop»

«winstall_xmlsh»

«winstall_xsltproc»

«winstall_saxon»

«winstall_ptp-tools»

----
